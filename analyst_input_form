<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Outage Banner Generator</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        h1 {
            color: #2c3e50;
            border-bottom: 2px solid #e67e22;
            padding-bottom: 10px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input, textarea, select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        textarea {
            height: 100px;
            resize: vertical;
        }
        button {
            background-color: #e67e22;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
        }
        button:hover {
            background-color: #d35400;
        }
        .result {
            margin-top: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 4px;
            border: 1px solid #e9ecef;
        }
        .customer-list {
            margin-top: 10px;
        }
        .customer-item {
            display: flex;
            flex-direction: column;
            margin-bottom: 15px;
            padding: 15px;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            background-color: #f8f9fa;
        }
        .customer-header {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        .customer-name {
            flex: 1;
            margin-right: 10px;
        }
        .customer-name input {
            width: 100%;
        }
        .remove-btn {
            background-color: #e74c3c;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            cursor: pointer;
        }
        .add-btn {
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            cursor: pointer;
            margin-top: 10px;
        }
        .customer-details {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 10px;
        }
        .customer-period, .customer-reason, .customer-kpi {
            display: flex;
            flex-direction: column;
        }
        .customer-reason textarea {
            height: 80px;
        }
        .action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        .action-buttons button {
            flex: 1;
        }
        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 1px solid #e9ecef;
        }
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
            border-bottom: none;
            border-radius: 4px 4px 0 0;
            margin-right: 5px;
        }
        .tab.active {
            background-color: white;
            border-bottom: 1px solid white;
            margin-bottom: -1px;
            font-weight: bold;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <h1>Data Outage Banner Generator</h1>
    
    <div class="tabs">
        <div class="tab active" data-tab="create">Create New Banner</div>
        <div class="tab" data-tab="update">Update Existing Banner</div>
        <div class="tab" data-tab="remove">Remove Customer</div>
    </div>
    
    <div id="create-tab" class="tab-content active">
        <form id="outage-form">
            <div class="form-group">
                <label>Affected Customers:</label>
                <div id="customer-list" class="customer-list">
                    <div class="customer-item">
                        <div class="customer-header">
                            <div class="customer-name">
                                <input type="text" class="customer-input" placeholder="Enter customer name" required>
                            </div>
                            <button type="button" class="remove-btn">Remove</button>
                        </div>
                        <div class="customer-details">
                            <div class="customer-period">
                                <label for="period-0">Period/Week Affected:</label>
                                <input type="text" id="period-0" class="period-input" required placeholder="e.g., P04W1">
                            </div>
                            <div class="customer-kpi">
                                <label for="kpi-0">KPI:</label>
                                <input type="text" id="kpi-0" class="kpi-input" required placeholder="e.g., Sales, Traffic">
                            </div>
                            <div class="customer-reason">
                                <label for="reason-0">Reason for Delay:</label>
                                <textarea id="reason-0" class="reason-input" required placeholder="Explain why the data is delayed..."></textarea>
                            </div>
                        </div>
                    </div>
                </div>
                <button type="button" id="add-customer" class="add-btn">Add Another Customer</button>
            </div>
            
            <div class="form-group">
                <label for="update-date">Last Updated Date:</label>
                <input type="date" id="update-date" required>
            </div>
            
            <button type="submit">Generate Banner URL</button>
        </form>
        
        <div id="result" class="result" style="display: none;">
            <h3>Your Banner URL:</h3>
            <p id="banner-url"></p>
            <button id="copy-url">Copy URL</button>
            <button id="preview-banner">Preview Banner</button>
        </div>
    </div>
    
    <div id="update-tab" class="tab-content">
        <form id="update-form">
            <div class="form-group">
                <label for="existing-url-update">Existing Banner URL:</label>
                <input type="text" id="existing-url-update" placeholder="Paste the existing banner URL here" required>
            </div>
            
            <div class="form-group">
                <label>Update Customers:</label>
                <div id="update-customer-list" class="customer-list">
                    <!-- Customer items will be added here dynamically -->
                </div>
                <button type="button" id="add-update-customer" class="add-btn">Add Another Customer</button>
            </div>
            
            <div class="form-group">
                <label for="update-date-field">Last Updated Date:</label>
                <input type="date" id="update-date-field" required>
            </div>
            
            <button type="submit">Update Banner URL</button>
        </form>
        
        <div id="update-result" class="result" style="display: none;">
            <h3>Updated Banner URL:</h3>
            <p id="updated-banner-url"></p>
            <button id="copy-updated-url">Copy URL</button>
            <button id="preview-updated-banner">Preview Banner</button>
        </div>
    </div>
    
    <div id="remove-tab" class="tab-content">
        <div id="remove-customer-form" class="result">
            <h3>Remove Customer from Banner</h3>
            <p>Enter the URL of the existing banner and select the customer to remove:</p>
            <div class="form-group">
                <label for="existing-url">Existing Banner URL:</label>
                <input type="text" id="existing-url" placeholder="Paste the existing banner URL here" required>
            </div>
            <div class="form-group">
                <label for="customer-to-remove">Customer to Remove:</label>
                <select id="customer-to-remove" required>
                    <option value="">Select a customer</option>
                </select>
            </div>
            <button id="generate-new-url">Generate New URL</button>
            <div id="new-url-result" style="margin-top: 15px; display: none;">
                <h4>New Banner URL:</h4>
                <p id="new-banner-url"></p>
                <button id="copy-new-url">Copy URL</button>
                <button id="preview-new-banner">Preview Banner</button>
            </div>
        </div>
    </div>
    
    <script>
        // Tab switching
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', function() {
                // Remove active class from all tabs and contents
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                
                // Add active class to clicked tab and corresponding content
                this.classList.add('active');
                document.getElementById(`${this.dataset.tab}-tab`).classList.add('active');
            });
        });
        
        // Set default date to today
        document.getElementById('update-date').valueAsDate = new Date();
        document.getElementById('update-date-field').valueAsDate = new Date();
        
        // Add customer field
        document.getElementById('add-customer').addEventListener('click', function() {
            const customerList = document.getElementById('customer-list');
            const customerCount = customerList.children.length;
            const newCustomer = document.createElement('div');
            newCustomer.className = 'customer-item';
            newCustomer.innerHTML = `
                <div class="customer-header">
                    <div class="customer-name">
                        <input type="text" class="customer-input" placeholder="Enter customer name" required>
                    </div>
                    <button type="button" class="remove-btn">Remove</button>
                </div>
                <div class="customer-details">
                    <div class="customer-period">
                        <label for="period-${customerCount}">Period/Week Affected:</label>
                        <input type="text" id="period-${customerCount}" class="period-input" required placeholder="e.g., P04W1">
                    </div>
                    <div class="customer-kpi">
                        <label for="kpi-${customerCount}">KPI:</label>
                        <input type="text" id="kpi-${customerCount}" class="kpi-input" required placeholder="e.g., Sales, Traffic">
                    </div>
                    <div class="customer-reason">
                        <label for="reason-${customerCount}">Reason for Delay:</label>
                        <textarea id="reason-${customerCount}" class="reason-input" required placeholder="Explain why the data is delayed..."></textarea>
                    </div>
                </div>
            `;
            customerList.appendChild(newCustomer);
        });
        
        // Add customer field for update form
        document.getElementById('add-update-customer').addEventListener('click', function() {
            const customerList = document.getElementById('update-customer-list');
            const customerCount = customerList.children.length;
            const newCustomer = document.createElement('div');
            newCustomer.className = 'customer-item';
            newCustomer.innerHTML = `
                <div class="customer-header">
                    <div class="customer-name">
                        <input type="text" class="customer-input" placeholder="Enter customer name" required>
                    </div>
                    <button type="button" class="remove-btn">Remove</button>
                </div>
                <div class="customer-details">
                    <div class="customer-period">
                        <label for="update-period-${customerCount}">Period/Week Affected:</label>
                        <input type="text" id="update-period-${customerCount}" class="period-input" required placeholder="e.g., P04W1">
                    </div>
                    <div class="customer-kpi">
                        <label for="update-kpi-${customerCount}">KPI:</label>
                        <input type="text" id="update-kpi-${customerCount}" class="kpi-input" required placeholder="e.g., Sales, Traffic">
                    </div>
                    <div class="customer-reason">
                        <label for="update-reason-${customerCount}">Reason for Delay:</label>
                        <textarea id="update-reason-${customerCount}" class="reason-input" required placeholder="Explain why the data is delayed..."></textarea>
                    </div>
                </div>
            `;
            customerList.appendChild(newCustomer);
        });
        
        // Remove customer field
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('remove-btn')) {
                const customerItem = e.target.closest('.customer-item');
                const customerList = customerItem.parentElement;
                if (customerList.children.length > 1) {
                    customerItem.remove();
                }
            }
        });
        
        // Form submission
        document.getElementById('outage-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Collect all customer data
            const customerItems = document.querySelectorAll('#customer-list .customer-item');
            const customers = [];
            
            customerItems.forEach((item, index) => {
                const name = item.querySelector('.customer-input').value.trim();
                const period = item.querySelector('.period-input').value.trim();
                const kpi = item.querySelector('.kpi-input').value.trim();
                const reason = item.querySelector('.reason-input').value.trim();
                
                customers.push({
                    name: name,
                    period: period,
                    kpi: kpi,
                    reason: reason
                });
            });
            
            // Get update date
            const updateDate = document.getElementById('update-date').value;
            
            // Format date for display
            const formattedDate = new Date(updateDate).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            
            // Create banner data
            const bannerData = {
                customers: customers,
                updateDate: formattedDate
            };
            
            // Generate the URL with the data encoded
            const baseUrl = window.location.href.replace('analyst_input_form.html', 'tableau_outage_banner.html');
            const encodedData = encodeURIComponent(JSON.stringify(bannerData));
            const bannerUrl = `${baseUrl}?action=update&data=${encodedData}`;
            
            // Display the result
            document.getElementById('banner-url').textContent = bannerUrl;
            document.getElementById('result').style.display = 'block';
        });
        
        // Update form submission
        document.getElementById('update-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const existingUrl = document.getElementById('existing-url-update').value;
            
            try {
                // Extract the base URL
                const baseUrl = existingUrl.split('?')[0];
                
                // Collect all customer data from update form
                const customerItems = document.querySelectorAll('#update-customer-list .customer-item');
                const updatedCustomers = [];
                
                customerItems.forEach((item, index) => {
                    const name = item.querySelector('.customer-input').value.trim();
                    const period = item.querySelector('.period-input').value.trim();
                    const kpi = item.querySelector('.kpi-input').value.trim();
                    const reason = item.querySelector('.reason-input').value.trim();
                    
                    updatedCustomers.push({
                        name: name,
                        period: period,
                        kpi: kpi,
                        reason: reason
                    });
                });
                
                // Get update date
                const updateDate = document.getElementById('update-date-field').value;
                
                // Format date for display
                const formattedDate = new Date(updateDate).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                
                // Create banner data
                const bannerData = {
                    customers: updatedCustomers,
                    updateDate: formattedDate
                };
                
                // Generate the URL with the data encoded
                const encodedData = encodeURIComponent(JSON.stringify(bannerData));
                const updatedBannerUrl = `${baseUrl}?action=update&data=${encodedData}`;
                
                // Display the result
                document.getElementById('updated-banner-url').textContent = updatedBannerUrl;
                document.getElementById('update-result').style.display = 'block';
            } catch (e) {
                console.error('Error updating URL:', e);
                alert('Error updating URL. Please check the existing URL format.');
            }
        });
        
        // Parse existing URL and populate update form
        document.getElementById('existing-url-update').addEventListener('input', function() {
            const url = this.value;
            try {
                const urlObj = new URL(url);
                const params = new URLSearchParams(urlObj.search);
                const dataParam = params.get('data');
                
                if (dataParam) {
                    // Try to decode and parse the data
                    const decodedData = decodeURIComponent(dataParam);
                    const bannerData = JSON.parse(decodedData);
                    
                    if (bannerData && bannerData.customers) {
                        const customerList = document.getElementById('update-customer-list');
                        
                        // Clear existing items
                        customerList.innerHTML = '';
                        
                        // Add customer items
                        bannerData.customers.forEach((customer, index) => {
                            const customerItem = document.createElement('div');
                            customerItem.className = 'customer-item';
                            customerItem.innerHTML = `
                                <div class="customer-header">
                                    <div class="customer-name">
                                        <input type="text" class="customer-input" value="${customer.name}" required>
                                    </div>
                                    <button type="button" class="remove-btn">Remove</button>
                                </div>
                                <div class="customer-details">
                                    <div class="customer-period">
                                        <label for="update-period-${index}">Period/Week Affected:</label>
                                        <input type="text" id="update-period-${index}" class="period-input" value="${customer.period}" required placeholder="e.g., P04W1">
                                    </div>
                                    <div class="customer-kpi">
                                        <label for="update-kpi-${index}">KPI:</label>
                                        <input type="text" id="update-kpi-${index}" class="kpi-input" value="${customer.kpi || ''}" required placeholder="e.g., Sales, Traffic">
                                    </div>
                                    <div class="customer-reason">
                                        <label for="update-reason-${index}">Reason for Delay:</label>
                                        <textarea id="update-reason-${index}" class="reason-input" required placeholder="Explain why the data is delayed...">${customer.reason}</textarea>
                                    </div>
                                </div>
                            `;
                            customerList.appendChild(customerItem);
                        });
                        
                        // Set update date if available
                        if (bannerData.updateDate) {
                            // Try to parse the date string
                            try {
                                const dateObj = new Date(bannerData.updateDate);
                                if (!isNaN(dateObj.getTime())) {
                                    document.getElementById('update-date-field').valueAsDate = dateObj;
                                }
                            } catch (e) {
                                console.error('Error parsing date:', e);
                            }
                        }
                    }
                } else {
                    // Fall back to the old URL parameter format
                    const customersParam = params.get('customers');
                    const updateDate = params.get('updateDate');
                    
                    if (customersParam) {
                        const customers = JSON.parse(customersParam);
                        const customerList = document.getElementById('update-customer-list');
                        
                        // Clear existing items
                        customerList.innerHTML = '';
                        
                        // Add customer items
                        customers.forEach((customer, index) => {
                            const customerItem = document.createElement('div');
                            customerItem.className = 'customer-item';
                            customerItem.innerHTML = `
                                <div class="customer-header">
                                    <div class="customer-name">
                                        <input type="text" class="customer-input" value="${customer.name}" required>
                                    </div>
                                    <button type="button" class="remove-btn">Remove</button>
                                </div>
                                <div class="customer-details">
                                    <div class="customer-period">
                                        <label for="update-period-${index}">Period/Week Affected:</label>
                                        <input type="text" id="update-period-${index}" class="period-input" value="${customer.period}" required placeholder="e.g., P04W1">
                                    </div>
                                    <div class="customer-kpi">
                                        <label for="update-kpi-${index}">KPI:</label>
                                        <input type="text" id="update-kpi-${index}" class="kpi-input" value="${customer.kpi || ''}" required placeholder="e.g., Sales, Traffic">
                                    </div>
                                    <div class="customer-reason">
                                        <label for="update-reason-${index}">Reason for Delay:</label>
                                        <textarea id="update-reason-${index}" class="reason-input" required placeholder="Explain why the data is delayed...">${customer.reason}</textarea>
                                    </div>
                                </div>
                            `;
                            customerList.appendChild(customerItem);
                        });
                        
                        // Set update date if available
                        if (updateDate) {
                            // Try to parse the date string
                            try {
                                const dateObj = new Date(updateDate);
                                if (!isNaN(dateObj.getTime())) {
                                    document.getElementById('update-date-field').valueAsDate = dateObj;
                                }
                            } catch (e) {
                                console.error('Error parsing date:', e);
                            }
                        }
                    }
                }
            } catch (e) {
                console.error('Error parsing URL:', e);
            }
        });
        
        // Copy URL button
        document.getElementById('copy-url').addEventListener('click', function() {
            const url = document.getElementById('banner-url').textContent;
            navigator.clipboard.writeText(url).then(function() {
                alert('URL copied to clipboard!');
            }, function(err) {
                console.error('Could not copy text: ', err);
            });
        });
        
        // Preview banner button
        document.getElementById('preview-banner').addEventListener('click', function() {
            const url = document.getElementById('banner-url').textContent;
            window.open(url, '_blank');
        });
        
        // Copy updated URL button
        document.getElementById('copy-updated-url').addEventListener('click', function() {
            const url = document.getElementById('updated-banner-url').textContent;
            navigator.clipboard.writeText(url).then(function() {
                alert('URL copied to clipboard!');
            }, function(err) {
                console.error('Could not copy text: ', err);
            });
        });
        
        // Preview updated banner button
        document.getElementById('preview-updated-banner').addEventListener('click', function() {
            const url = document.getElementById('updated-banner-url').textContent;
            window.open(url, '_blank');
        });
        
        // Parse existing URL and populate customer dropdown
        document.getElementById('existing-url').addEventListener('input', function() {
            const url = this.value;
            try {
                const urlObj = new URL(url);
                const params = new URLSearchParams(urlObj.search);
                const customersParam = params.get('customers');
                
                if (customersParam) {
                    const customers = JSON.parse(customersParam);
                    const customerSelect = document.getElementById('customer-to-remove');
                    
                    // Clear existing options
                    customerSelect.innerHTML = '<option value="">Select a customer</option>';
                    
                    // Add customer options
                    customers.forEach(customer => {
                        const option = document.createElement('option');
                        option.value = customer.name;
                        option.textContent = `${customer.name} (${customer.period})`;
                        customerSelect.appendChild(option);
                    });
                }
            } catch (e) {
                console.error('Error parsing URL:', e);
            }
        });
        
        // Generate new URL without the selected customer
        document.getElementById('generate-new-url').addEventListener('click', function() {
            const existingUrl = document.getElementById('existing-url').value;
            const customerToRemove = document.getElementById('customer-to-remove').value;
            
            if (!existingUrl || !customerToRemove) {
                alert('Please enter both the existing URL and select a customer to remove.');
                return;
            }
            
            try {
                const urlObj = new URL(existingUrl);
                const params = new URLSearchParams(urlObj.search);
                const dataParam = params.get('data');
                const baseUrl = existingUrl.split('?')[0];
                
                let customers = [];
                let updateDate = '';
                
                if (dataParam) {
                    // Try to decode and parse the data
                    const decodedData = decodeURIComponent(dataParam);
                    const bannerData = JSON.parse(decodedData);
                    
                    if (bannerData && bannerData.customers) {
                        customers = bannerData.customers;
                        updateDate = bannerData.updateDate;
                    }
                } else {
                    // Fall back to the old URL parameter format
                    const customersParam = params.get('customers');
                    updateDate = params.get('updateDate');
                    
                    if (customersParam) {
                        customers = JSON.parse(customersParam);
                    }
                }
                
                // Filter out the customer to remove
                const filteredCustomers = customers.filter(customer => customer.name !== customerToRemove);
                
                // Create banner data
                const bannerData = {
                    customers: filteredCustomers,
                    updateDate: updateDate
                };
                
                // Generate the URL with the data encoded
                const encodedData = encodeURIComponent(JSON.stringify(bannerData));
                const newBannerUrl = `${baseUrl}?action=update&data=${encodedData}`;
                
                // Display the result
                document.getElementById('new-banner-url').textContent = newBannerUrl;
                document.getElementById('new-url-result').style.display = 'block';
            } catch (e) {
                console.error('Error generating new URL:', e);
                alert('Error generating new URL. Please check the existing URL format.');
            }
        });
        
        // Copy new URL button
        document.getElementById('copy-new-url').addEventListener('click', function() {
            const url = document.getElementById('new-banner-url').textContent;
            navigator.clipboard.writeText(url).then(function() {
                alert('URL copied to clipboard!');
            }, function(err) {
                console.error('Could not copy text: ', err);
            });
        });
        
        // Preview new banner button
        document.getElementById('preview-new-banner').addEventListener('click', function() {
            const url = document.getElementById('new-banner-url').textContent;
            window.open(url, '_blank');
        });
    </script>
</body>
</html> 
